/*
 * This file is generated by jOOQ.
*/
package it.jesinity.jooq.schema.tables;


import it.jesinity.jooq.schema.Keys;
import it.jesinity.jooq.schema.Public;
import it.jesinity.jooq.schema.tables.records.InputdocumentRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Inputdocument extends TableImpl<InputdocumentRecord> {

    private static final long serialVersionUID = 362428102;

    /**
     * The reference instance of <code>PUBLIC.INPUTDOCUMENT</code>
     */
    public static final Inputdocument INPUTDOCUMENT = new Inputdocument();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InputdocumentRecord> getRecordType() {
        return InputdocumentRecord.class;
    }

    /**
     * The column <code>PUBLIC.INPUTDOCUMENT.PK</code>.
     */
    public final TableField<InputdocumentRecord, Integer> PK = createField("PK", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("(NEXT VALUE FOR PUBLIC.SYSTEM_SEQUENCE_90CC07F6_6527_4FE7_9A28_2CA4402E337B)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>PUBLIC.INPUTDOCUMENT.ID</code>.
     */
    public final TableField<InputdocumentRecord, String> ID = createField("ID", org.jooq.impl.SQLDataType.VARCHAR.length(512).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.INPUTDOCUMENT.TEXT</code>.
     */
    public final TableField<InputdocumentRecord, String> TEXT = createField("TEXT", org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.field("'unknown'", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * The column <code>PUBLIC.INPUTDOCUMENT.PUBLISHDAY</code>.
     */
    public final TableField<InputdocumentRecord, Integer> PUBLISHDAY = createField("PUBLISHDAY", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("19700101", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>PUBLIC.INPUTDOCUMENT.PUBLISHDATE</code>.
     */
    public final TableField<InputdocumentRecord, Long> PUBLISHDATE = createField("PUBLISHDATE", org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>PUBLIC.INPUTDOCUMENT.SOURCETYPE</code>.
     */
    public final TableField<InputdocumentRecord, String> SOURCETYPE = createField("SOURCETYPE", org.jooq.impl.SQLDataType.VARCHAR.length(256).defaultValue(org.jooq.impl.DSL.field("'unknown'", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>PUBLIC.INPUTDOCUMENT.TITLE</code>.
     */
    public final TableField<InputdocumentRecord, String> TITLE = createField("TITLE", org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.field("'unknown'", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * The column <code>PUBLIC.INPUTDOCUMENT.SOURCENAME</code>.
     */
    public final TableField<InputdocumentRecord, String> SOURCENAME = createField("SOURCENAME", org.jooq.impl.SQLDataType.VARCHAR.length(256).defaultValue(org.jooq.impl.DSL.field("'unknown'", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>PUBLIC.INPUTDOCUMENT.AUTHOR</code>.
     */
    public final TableField<InputdocumentRecord, String> AUTHOR = createField("AUTHOR", org.jooq.impl.SQLDataType.VARCHAR.length(256).defaultValue(org.jooq.impl.DSL.field("'unknown'", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>PUBLIC.INPUTDOCUMENT.SOURCEDOMAIN</code>.
     */
    public final TableField<InputdocumentRecord, String> SOURCEDOMAIN = createField("SOURCEDOMAIN", org.jooq.impl.SQLDataType.VARCHAR.length(256).defaultValue(org.jooq.impl.DSL.field("'unknown'", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>PUBLIC.INPUTDOCUMENT.SOURCETOPIC</code>.
     */
    public final TableField<InputdocumentRecord, String> SOURCETOPIC = createField("SOURCETOPIC", org.jooq.impl.SQLDataType.VARCHAR.length(256).defaultValue(org.jooq.impl.DSL.field("'unknown'", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>PUBLIC.INPUTDOCUMENT.LINK</code>.
     */
    public final TableField<InputdocumentRecord, String> LINK = createField("LINK", org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.field("'unknown'", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * The column <code>PUBLIC.INPUTDOCUMENT.DOMAIN</code>.
     */
    public final TableField<InputdocumentRecord, String> DOMAIN = createField("DOMAIN", org.jooq.impl.SQLDataType.VARCHAR.length(256).defaultValue(org.jooq.impl.DSL.field("'unknown'", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>PUBLIC.INPUTDOCUMENT.TOPIC</code>.
     */
    public final TableField<InputdocumentRecord, String> TOPIC = createField("TOPIC", org.jooq.impl.SQLDataType.VARCHAR.length(256).defaultValue(org.jooq.impl.DSL.field("'unknown'", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>PUBLIC.INPUTDOCUMENT</code> table reference
     */
    public Inputdocument() {
        this("INPUTDOCUMENT", null);
    }

    /**
     * Create an aliased <code>PUBLIC.INPUTDOCUMENT</code> table reference
     */
    public Inputdocument(String alias) {
        this(alias, INPUTDOCUMENT);
    }

    private Inputdocument(String alias, Table<InputdocumentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Inputdocument(String alias, Table<InputdocumentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<InputdocumentRecord, Integer> getIdentity() {
        return Keys.IDENTITY_INPUTDOCUMENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<InputdocumentRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_7;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<InputdocumentRecord>> getKeys() {
        return Arrays.<UniqueKey<InputdocumentRecord>>asList(Keys.CONSTRAINT_7);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Inputdocument as(String alias) {
        return new Inputdocument(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Inputdocument rename(String name) {
        return new Inputdocument(name, null);
    }
}
